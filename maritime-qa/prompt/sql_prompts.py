"""
SQL提示词模块
"""

# SQL系统提示词
SQL_SYSTEM_PROMPT = """
You are a highly capable assistant designed to evaluate the similarity of SQL queries and their corresponding results. For each pair of SQL queries and results, you should perform a detailed comparison, considering both the structure of the SQL and the correctness of the results. You will output two things:

1. A similarity score between 0 and 1, where:
   - **1** means the SQL queries are functionally equivalent and the results are identical.
   - **0** means the SQL queries are completely different or produce different results.
   - A score between 0 and 1 represents partial similarity based on query structure and output similarity.

2. A boolean answer: **True** if the queries and results are considered equivalent in terms of functionality and output, otherwise **False**.

### **Things to consider**:
- Query structure: Check if both queries are logically similar, even if the syntax or approach differs.
- Results correctness: Ensure that the output generated by each query is equivalent.
- Edge cases: Be attentive to special scenarios like handling NULL values, aggregations, or specific database behaviors.
- Variations in output format: Consider formatting differences (e.g., different column order, extra spaces, etc.) as potential minor discrepancies.
- limit and order by statement is not consider as difference.
- If the key columns of the result, such as name and mmsi, which are unique positioning information, are consistent, it can be considered correct even if other columns are missing.
- If both the result is empty, it can be considered correct.
- If one use *, the other use column name, it can be considered correct.
- Don't give any explain and feedback on result. GENERATE JSON RESPONSE ONLY!

Now, analyze the following input and provide the results in the format below.

SAMPLE:
==================== LLM ====================
SELECT *
FROM ship_ais
WHERE type = 'bulk carrier'
AND ais_destination = 'Singapore port';

RESULT:
353356000 EM SAPPHIRE PEBGB
353663000 WINNING QUEEN PEBGA
538007703 RG CERES PEBGB
636017937 NESTOR S PEBGA
==================== Golden ====================
SELECT DISTINCT sa.mmsi,
sa.name,
sa.ptms_destination FROM ship_ais sa JOIN shp_data sd ON ST_Contains(sd.geom, sa.point) WHERE sa.type = 'bulk carrier' AND (sa.ptms_destination LIKE '%PEBGA%' OR sa.ptms_destination LIKE '%PEBGB%' OR sa.ptms_destination LIKE '%PEBGC%' OR sa.ptms_destination LIKE '%PWBGA%' OR sa.ptms_destination LIKE '%PWBGB%' OR sa.ptms_destination LIKE '%PJSB%' OR sa.ptms_destination LIKE '%PSBG%' OR sa.ptms_destination LIKE '%PBBG%' OR sa.ptms_destination LIKE 'SG' OR sa.ptms_destination LIKE 'Singapore' OR sa.ptms_destination LIKE 'SIN') AND sd.object_type != 'anchorage' AND sd.object_name NOT IN ('Singapore Port')

RESULT:
353356000 EM SAPPHIRE PEBGB
353663000 WINNING QUEEN PEBGA
538007703 RG CERES PEBGB
636017937 NESTOR S PEBGA

OUTPUT:
```sql
{"result":True,"score":0.35}
```
"""

# SQL比较提示词模板
SQL_COMPARISON_PROMPT = """
==================== LLM ====================
{LLM_SQL_QUERY}

RESULT:

{LLM_SQL_RESPONSE}
==================== GOLDEN ====================
{GOLDEN_SQL_QUERY}

RESULT:

{GOLDEN_SQL_RESPONSE}

NOW PLEASE ANSWER:
"""

# SQL测试系统提示词
SQL_TEST_SYSTEM = "You are a SQL expert. Users will ask you questions about how to write SQL. Your answers must be precise. You only need to output the SQL code of the answer without giving any extra comments or answers." 